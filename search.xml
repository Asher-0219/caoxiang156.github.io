<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[常用的正则]]></title>
    <url>%2F2017%2F09%2F26%2Fregularly%2F</url>
    <content type="text"><![CDATA[用户名正则1234//用户名正则，4到16位（字母，数字，下划线，减号）var uPattern = /^[a-zA-Z0-9_-]&#123;4,16&#125;$/;//输出 trueconsole.log(uPattern.test("caibaojian")); 密码强度正则1234//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符var pPattern = /^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/;//输出 trueconsole.log("=="+pPattern.test("caibaojian#")); 整数正则123456789101112//正整数正则var posPattern = /^\d+$/;//负整数正则var negPattern = /^-\d+$/;//整数正则var intPattern = /^-?\d+$/;//输出 trueconsole.log(posPattern.test("42"));//输出 trueconsole.log(negPattern.test("-42"));//输出 trueconsole.log(intPattern.test("-42")); 数字正则123456789//正数正则var posPattern = /^\d*\.?\d+$/;//负数正则var negPattern = /^-\d*\.?\d+$/;//数字正则var numPattern = /^-?\d*\.?\d+$/;console.log(posPattern.test("42.2"));console.log(negPattern.test("-42.2"));console.log(numPattern.test("-42.2")); Email正则1234//Email正则var ePattern = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$/;//输出 trueconsole.log(ePattern.test("99154507@qq.com")); 手机号码正则1234//手机号正则var mPattern = /^1[34578]\d&#123;9&#125;$/; //http://caibaojian.com/regexp-example.html//输出 trueconsole.log(mPattern.test("15507621888")); 身份证号正则1234//身份证号（18位）正则var cP = /^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/;//输出 trueconsole.log(cP.test("11010519880605371X")); IPv4地址正则1234//ipv4地址正则var ipP = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;//输出 trueconsole.log(ipP.test("115.28.47.26")); 十六进制颜色正则1234//RGB Hex颜色正则var cPattern = /^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/;//输出 trueconsole.log(cPattern.test("#b8b8b8")); 日期正则1234567891011121314//日期正则，简单判定,未做月份及日期的判定var dP1 = /^\d&#123;4&#125;(\-)\d&#123;1,2&#125;\1\d&#123;1,2&#125;$/;//输出 trueconsole.log(dP1.test("2017-05-11"));//输出 trueconsole.log(dP1.test("2017-15-11"));//日期正则，复杂判定var dP2 = /^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/;//输出 trueconsole.log(dP2.test("2017-02-11"));//输出 falseconsole.log(dP2.test("2017-15-11"));//输出 falseconsole.log(dP2.test("2017-02-29")); QQ号码正则1234//QQ号正则，5至11位var qqPattern = /^[1-9][0-9]&#123;4,10&#125;$/;//输出 trueconsole.log(qqPattern.test("65974040")); 微信号正则1234//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线var wxPattern = /^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/;//输出 trueconsole.log(wxPattern.test("caibaojian_com")); 车牌号正则1234//车牌号正则var cPattern = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/;//输出 trueconsole.log(cPattern.test("粤B39006")); 包含中文正则1234//包含中文正则var cnPattern = /[\u4E00-\u9FA5]/;//输出 trueconsole.log(cnPattern.test("赵四"));]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[移动 Web 开发问题和优化小结]]></title>
    <url>%2F2017%2F09%2F25%2Fmobile%2F</url>
    <content type="text"><![CDATA[Meta标签1&lt;meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;" name="viewport" /&gt; 禁止ios上自动识别电话1&lt;meta content="telephone=no" name="format-detection" /&gt; 禁止android上自动识别邮箱1&lt;meta content="email=no" name="format-detection" /&gt; 针对ios上的safari上地址栏和顶端样式条12&lt;meta name="apple-mobile-web-app-capable" content="yes" /&gt;&lt;meta name="apple-mobile-web-app-status-bar-style" content="black" /&gt; 打电话发短信12&lt;a href="tel:020-11811922"&gt;打电话给:0755-10086&lt;/a&gt;&lt;a href="sms:10086"&gt;发短信给: 10086&lt;/a&gt; css3过渡动画开启硬件加速123456.translate3d&#123; -webkit-transform: translate3d(0, 0, 0); -moz-transform: translate3d(0, 0, 0); -ms-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0); &#125; 移动端click屏幕产生200-300 ms的延迟响应click事件因为要等待确认是否是双击事件，会有300ms的延迟（两次点击事件间隔小于300ms就认为是双击），体验并不好。现在的解决方案，第一个就是采用touchstart或者touchend代替click。或者封装tap事件来代替click 事件，所谓的tap事件由touchstart事件+ touchmove（判断是否是滑动事件）+touchend事件封装组成。关于touch和鼠标事件的延迟说明所以在手机上还是使用touch事件来代替click事件 图片优化base64编码图片替换url图片这个应该没什么好解释的，就是能不发请求的就不要发，对于一些小图标之类的，可以将图片用base64，来减少请求的发送。 图片压缩对于整个网站来说，图片是最占流量的资源之一，能不使用就不适用，图标可是使用base64编码，字体图标代替，SVG等来代替，使用就要选择最合适的格式，合适的尺寸，然后压缩–这里推荐腾讯推出的智图 图片懒加载首屏加载的快慢，直接影响用户的体验，建议将非首屏的图片资源放到用户需要时才加载。这样可以大大优化首屏加载，减少首屏加载所需要的时间！ps：懒加载要使用js频繁操作dom，期间会导致大量重绘渲染，影响性能。 img还是background图片的展示方式有两种，一种是以图片标签显示，一种是以背景图片显示！下面写了这两者的区别。img：html中的标签img是网页结构的一部分会在加载结构的过程中和其他标签一起加载。background：以css背景图存在的图片background会等到结构加载完成（网页的内容全部显示以后）才开始加载也就是说，网页会先加载标签img的内容，再加载背景图片background引用的图片。引入一张图片，那么在这个图片加载完成之前，img后的内容不会显示。而用background来引入同样的图片，网页结构和内容加载完成之后，才开始加载背景图片，网页内容能正常浏览，但是看不到背景图片。 1px细线解决方案用小数来写px值1234567.border &#123; border: 1px solid #999 &#125;@media screen and (-webkit-min-device-pixel-ratio: 2) &#123; .border &#123; border: 0.5px solid #999 &#125;&#125;@media screen and (-webkit-min-device-pixel-ratio: 3) &#123; .border &#123; border: 0.333333px solid #999 &#125;&#125; :before, :after与transform123456789101112131415161718192021.radius-border&#123; position: relative;&#125;@media screen and (-webkit-min-device-pixel-ratio: 2)&#123; .radius-border:before&#123; content: ""; pointer-events: none; /* 防止点击触发 */ box-sizing: border-box; position: absolute; width: 200%; height: 200%; left: 0; top: 0; border-radius: 8px; border:1px solid #999; -webkit-transform(scale(0.5)); -webkit-transform-origin: 0 0; transform(scale(0.5)); transform-origin: 0 0; &#125;&#125; 谨慎使用fixed1ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位，会发生元素错位，有时候会出现闪屏的效果。所以在手机上，不建议用fixed定位，使用absolute代替！ 使用rem适配1.rem:rem和em单位一样，都是一个相对单位。不同的是em是相对于元素的父元素的font-size进行计算；rem是相对于根元素html的font-size进行计算。这样一来rem就绕开了复杂的层级关系，实现了类似于em单位的功能。 2.屏幕根据设计稿的比例转换对应的rem值，比如： 640的设置 = 20*(clientWidth/320) 320的设置 = 10*(clientWidth/320) 设置html font-size的工作我们交给js去实现，所以我的切稿元素都按照 (元素设计稿px/100 = 最终的rem)12345678910111213(function (doc, win) &#123; var docEl = doc.documentElement, resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize', recalc = function () &#123; var clientWidth = docEl.clientWidth; if (!clientWidth) return; docEl.style.fontSize = 100 * (clientWidth / 750) + 'px'; &#125;; if (!doc.addEventListener) return; win.addEventListener(resizeEvt, recalc, false); doc.addEventListener('DOMContentLoaded', recalc, false);&#125;)(document, window); 禁用a,button,input,optgroup,select,textarea 等标签背景变暗在移动端使用a标签做按钮的时候或者文字连接的时候，点击按钮会出现一个 “暗色的”背景，比如如下代码:12&lt;a href=""&gt;button1&lt;/a&gt;&lt;input type="button" value="提交"/&gt; 在移动端点击后 会出现”暗色”的背景，这时候我们需要在css加入如下代码即可： 123a,button,input,optgroup,select,textarea&#123; -webkit-tap-highlight-color: rgba(0,0,0,0);&#125; webkit表单输入框placeholder的颜色值改变如果想要默认的颜色显示红色，代码如下： 1input::-webkit-input-placeholder&#123;color:red;&#125; 如果想要用户点击变为蓝色，代码如下： 1input:focus::-webkit-input-placeholder&#123;color:blue;&#125; 禁止复制、选中文本123456Element &#123; -webkit-user-select: none; -moz-user-select: none; -khtml-user-select: none; user-select: none;&#125; iphone及ipad下输入框默认内阴影123Element&#123; -webkit-appearance: none;&#125;]]></content>
      <categories>
        <category>mobile</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[基础算法]]></title>
    <url>%2F2017%2F09%2F06%2Farray%2F</url>
    <content type="text"><![CDATA[数组去重1234// 返回去重后的数组const numbers = [1, 2, 1, 1, 2, 1, 3, 4, 1 ];const uniq = [...new Set(numbers)] // =&gt; [ 1, 2, 3, 4 ];const uniq2 = Array.from(new Set(numbers)) // =&gt; [ 1, 2, 3, 4 ]; 根据属性来更新一个数组中的对象1234const initial = [ &#123;id: 1, score: 1&#125;, &#123;id: 2, score: 2&#125;, &#123;id: 3, score: 4&#125;];const newValue = &#123;id: 3, score: 3&#125;;const updated = initial.map(x =&gt; x.id === newValue.id ? newValue : x);console.log(updated) // =&gt; [ &#123; id: 1, score: 1 &#125;, &#123; id: 2, score: 2 &#125;, &#123; id: 3, score: 3 &#125; ] 根据属性删除数组中的一个对象123const removeId = 3;const without3 = initial.filter(x =&gt; x.id !== removeId);console.log(without3) // =&gt; [ &#123; id: 1, score: 1 &#125;, &#123; id: 2, score: 2 &#125; ] 删除一个对象上的属性(key)123const obj = &#123;a: 1, b: 2, c: 3&#125;;const &#123;a, ...newObj&#125; = obj;console.log(newObj) // =&gt; &#123;b: 2, c: 3&#125;;]]></content>
  </entry>
  <entry>
    <title><![CDATA[JS开发中的一些小技巧和方法]]></title>
    <url>%2F2017%2F09%2F01%2Ftips%2F</url>
    <content type="text"><![CDATA[生成指定范围内的随机数123function setRadomNum(min,max)&#123; return Math.floor(Math.random() * (max - min + 1)) + min; &#125; json转url参数1234567function json2url(json) &#123; var arr=[]; for(var name in json)&#123; arr.push(name+&apos;=&apos;+json[name]); &#125; return arr.join(&apos;&amp;&apos;);&#125; 验证是否为数组123function isArray(obj)&#123; return Array.isArray(obj) || Object.prototype.toString.call(obj) === &apos;[object Array]&apos;;&#125; 清空数组1234567891011方式一 通过将长度设置为0var arr=[1,2,3,4,5];arr.length=0;方式二 通过splice方法 var arr=[1,2,3,4,5];arr.splice(0,arr.length);//方式三var arr=[1,2,3,4,5];arr=[]; 保留指定小数位12345var num =3.1415926;num = num.toFixed(4); //toFixed()方法可把 Number 四舍五入为指定小数位数的数字，括号里面取值0~20（包括0和20）console.log(num); //3.1416 打乱数组的顺序123456789101112131415方式一arr.sort(function()&#123;return Math.random()-0.5&#125;);方式二function shuffle(arr) &#123; var i, j, temp; for (i = arr.length - 1; i &gt; 0; i--) &#123; j = Math.floor(Math.random() * (i + 1)); temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; &#125; return arr; &#125;; 使用 === 而不是 ==12345678[10] == 10 // 为 true[10] === 10 // 为 false&apos;10&apos; == 10 // 为 true&apos;10&apos; === 10 // 为 false [] == 0 // 为 true [] === 0 // 为 false &apos;&apos; == false // 为 true 但 true == &quot;a&quot; 为false &apos;&apos; === false // 为 false 妙用“&amp;&amp;”和“||”用于赋值12345var attr = true &amp;&amp; 4 &amp;&amp; &quot;aaa&quot;; //aaa;var attr = true &amp;&amp; 0 &amp;&amp; &quot;aaa&quot;; //0var attr = 100 || 12; //100var attr = &quot;e&quot; || &quot;hahaha&quot; //&apos;e&apos;var attr = &quot;&quot; || &quot;hahaha&quot; //&apos;hahaha&apos; 用于条件执行语句123456789101112// 普通的if语句if(test)&#123; isTrue();&#125;// 上面的语句可以使用 &apos;&amp;&amp;&apos; 写为：( test &amp;&amp; isTrue() );test = false;if(!test)&#123; isFalse();&#125;// 上面的语句可以使用 &apos;||&apos; 写为：( test || isFalse()); 用于多次判断后的赋值123456789101112131415161718var add_level = 0; if(add_step == 5)&#123; add_level = 1; &#125; else if(add_step == 10)&#123; add_level = 2; &#125; else if(add_step == 12)&#123; add_level = 3; &#125; else if(add_step == 15)&#123; add_level = 4; &#125; else &#123; add_level = 0; &#125;//可以写成var add_level = (add_step==5 &amp;&amp; 1) || (add_step==10 &amp;&amp; 2) || (add_step==12 &amp;&amp; 3) || (add_step==15 &amp;&amp; 4) || 0; 获取数组中的最大值或最小值123456function maxAndMin(arr)&#123; return &#123; max:Math.max.apply(null,arr.join(&apos;,&apos;).split(&apos;,&apos;)), min:Math.min.apply(null,arr.join(&apos;,&apos;).split(&apos;,&apos;)) &#125;&#125; 随机获取数组里的元素123function getRadomFromArr(arr)&#123; return arr[Math.floor(Math.random()*arr.length)];&#125; 从数组里查找指定的值12345678function findInArr(arr, value)&#123; for (var i=0; i&lt;arr.length; i++)&#123; if (arr[i] == value)&#123; return true; &#125; &#125; return false;&#125; 生成指定长度的随机数字字母字符串12345function getRandomStr(len) &#123; var str = &quot;&quot;; for( ; str.length &lt; len; str += Math.random().toString(36).substr(2)); return str.substr(0, len);&#125; 去除字符串的空格去除首尾空格1234function trim(str)&#123; return str.replace(/(^\s*)|(\s*$)/g, &quot;&quot;);&#125;trim(&apos; hello world &apos;); //&quot;hello world&quot; 去除所有空格1234function trimAll(str)&#123; return str.replace(/\s+/g,&quot;&quot;);&#125;trimAll(&apos; he ll o wo r ld &apos;); //&quot;helloworld&quot;]]></content>
  </entry>
</search>
